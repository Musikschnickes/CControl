#!/usr/bin/python
import os, sys
from optparse import OptionParser
from subprocess import Popen, PIPE
from tempfile import NamedTemporaryFile

CCBASIC = "ccbasic"

includepath = ["."]

includes = []
macros = {}

class ProcessException(Exception):
	def __init__(self, message, filename = "stdin", lineno = -1, severity = "Error"):
		self._filename = filename
		self._lineno = lineno
		self._severity = severity
		Exception.__init__(self, message)
	
	def __str__(self):
		message = Exception.__str__(self)
		return "%s in %s on line %s: %s" % (self._severity, self._filename, self._lineno, message)

class Macro:
	def __init__(self, filename, lineno, name, params, definition):
		self.filename = filename
		self.lineno = lineno
		self.name = name
		self.params = params
		self.definition = definition
	
	def __str__(self):
		return "#define %s (%s) %s" % (self.name, ", ".join(self.params), self.definition)
	
	def Apply(self, params, filename, lineno):
		if len(params) != len(self.params):
			raise ProcessException("Invalid argument count for %%%s: Expected %d, got %d" % (self.name, len(self.params), len(params)), filename, lineno)
		
		code = self.definition
		for i in range(len(params)):
			code = code.replace("%" + self.params[i], params[i])
		return code
		
def process(input, output, verbose = False, outputLine = 1):
	global includes, macros
	
	inMacro = False
	outputLineStart = outputLine
	lineno = 1
	
	while True:
		line = input.readline()
		if line == "":
			break
		line = line.rstrip()
		
		if line.strip().startswith("#include"):
			start = line.find("\"")
			end = line.find("\"", start + 1)
			if start < 0 or end < 0:
				raise ProcessException("Malformed #include", input.name, lineno)

			filename = line[start + 1:end]
			
			for path in includepath:
				fullfile = os.path.join(path, filename)
				if os.path.exists(fullfile):
					break
			else:
				raise ProcessException("Unable to find %s" % filename, input.name, lineno)
			
			if verbose:
				print >>sys.stderr, "%15s:%3d: Including %s for %s" % (input.name, lineno, fullfile, filename)
				
			try:
				included = open(fullfile, "r")
			except Exception, ex:
				raise ProcessException("Unable to open %s for reading: %s" % (filename, ex), input.name, lineno)

			lines = process(included, output, verbose, outputLine)
			includes.append((input.name, lineno, included.name, outputLine, lines))
			outputLine += lines
			
		elif line.strip().upper().startswith("ASCIITABLE"):
			(ascii, name, data) = line.strip().split(None, 2)
			bytes = map(ord, eval(data))
			
			if verbose:
				print >>sys.stderr, "%15s:%3d: Including %s with %d+1 entries" % (input.name, lineno, name, len(bytes))
			
			#output.write("DEFINE %s_len %d\n" % (name, len(bytes)))
			#outputLine += 1
			
			output.write("TABLE %s\n" % name)
			output.write("\t%s 0\n" % " ".join(map(str, bytes)))
			output.write("TABEND\n")
			outputLine += 3
			
		elif line.strip().startswith("#define"):
			(define, name, rest) = line.strip().split(None, 2)
			if name in macros:
				raise ProcessException("Macro %s already declared in %s on line %d" % (name, macros[name].filename, macros[name].lineno), input.name, lineno)
			
			endParams = rest.find(")")
			if not rest.startswith("(") or endParams < 0:
				raise ProcessException("Malformed #define", input.name, lineno)
			
			params = map(str.strip, rest[1:endParams].split(","))
			definition = rest[endParams + 1:].strip()
			
			if definition.endswith("\\"):
				inMacro = True
				definition = definition[0:-1] + "\n"
				
			macros[name] = Macro(input.name, lineno, name, params, definition)
			
		elif inMacro:
			if line.endswith("\\"):
				macros[name].definition += line[0:-1] + "\n"
			else:
				macros[name].definition += line
				inMacro = False
		
		elif line.strip().startswith("%"):
			(name, params) = line.strip()[1:].split(None, 1)
			if name not in macros:
				if "#" + name in macros:
					name = "#" + name
					useEval = True
				else:
					raise ProcessException("Undefined macro %s" % name, input.name, lineno)
			else:
				useEval = False
				
			if not params.startswith("(") or not params.endswith(")"):
				raise ProcessException("Malformed macro invokation", input.name, lineno)
			
			code = macros[name].Apply(map(str.strip, params[1:-1].split(",")), input.name, lineno)
			if useEval:
				code = "%r" % eval(code)
			output.write("%s\n" % code)
			outputLine += code.count("\n") + 1
			
		else:
			output.write("%s\n" % line)
			outputLine += 1
		lineno += 1
	
	return outputLine - outputLineStart

def lineToFile(lineno):
	maxStart = 0
	container = None
	for (parent, start, filename, outputLine, count) in includes:
		if outputLine <= lineno and outputLine + count >= lineno and outputLine > maxStart:
			maxStart = outputLine
			container = filename
	return container, lineno - maxStart + 1
		
if __name__ == "__main__":
	parser = OptionParser(usage = "Usage: %prog [Options] File", version = "%prog 0.1")
	parser.add_option("-v", dest = "verbose", action = "store_true", help = "be verbose")
	parser.add_option("--dump", dest = "dump", action = "store_true", help = "dump generated code")
	parser.add_option("--no-clobber", dest = "noClobber", action = "store_true")
	
	(options, args) = parser.parse_args()
	if len(args) != 1:
		print >>sys.stderr, "Please specify the CCBasic file to pre-process"
		sys.exit(1)
		
	try:
		main = open(args[0], "r")
	except Exception, ex:
		print >>sys.stderr, "Unable to open %s for reading: %s" % (args[0], ex)
	
	output = NamedTemporaryFile(suffix = ".bas", dir = ".", delete = False)
	
	try:
		lines = process(main, output, options.verbose)
		includes.append((None, 1, main.name, 1, lines))
	except ProcessException, ex:
		print str(ex)
		sys.exit(1)

	main.close()
	output.close()
	
	if options.dump:
		print "' Start Dump"
		print open(output.name, "r").read()
		print "' End Dump"
	
	try:
		ccbasic = Popen([CCBASIC, output.name], stdin = None, stdout = PIPE, stderr = None)
	except Exception, ex:
		print "Unable to compile %s: %s" % (output.name, ex)
		sys.exit(1)
	
	(out, err) = ccbasic.communicate()
	if out.endswith("Fehler gefunden\n"):
		for line in out.splitlines()[3:-1]:
			if ": " in line:
				(lineno, message) = line.split(": ", 1)
				if lineno.startswith("Zeile "):
					lineno = lineno[6:]
				lineno = int(lineno)
				
				filename, realLine = lineToFile(lineno)
				print >>sys.stderr, "in %s on line %d:" % (filename, realLine)
				print >>sys.stderr, "  %s" % message
			else:
				print >>sys.stderr, line
		errors = 1
	else:
		if options.verbose:
			print out
		os.rename(output.name[0:-4] + ".dat", main.name[0:-4] + ".dat")
		errors = 0
	
	if not options.noClobber:
		os.unlink(output.name)
		
	sys.exit(errors)
